{"version":3,"sources":["../../src/index.tsx"],"names":["useIsomorphicLayoutEffect","canUseDOM","React","useEffect","checkStyles","noop","window","self","assignRef","ref","value","isFunction","createNamedContext","name","defaultValue","Ctx","createContext","forwardRefWithAs","render","memoWithAs","Component","propsAreEqual","getOwnerDocument","element","makeId","args","val","useControlledSwitchWarning","useEventCallback","callback","useRef","useCallback","useForkedRef","refs","useMemo","wrapEvent","theirHandler","ourHandler","event","createDescendantContext","initialValue","descendants","registerDescendant","unregisterDescendant","useDescendant","descendant","context","indexProp","forceUpdate","dispatch","useState","Object","useForceUpdate","useContext","index","item","previousDescendants","usePrevious","someDescendantsHaveChanged","useDescendantsInit","DescendantProvider","children","items","set","explicitIndex","rest","newItems","Boolean","Node","newItem","serverHandoffComplete","id","genId","TabsKeyboardActivation","TabsOrientation","TabsDescendantsContext","TabPanelDescendantsContext","TabsContext","Tabs","as","Comp","defaultIndex","orientation","Horizontal","controlledIndex","undefined","keyboardActivation","Auto","onChange","readOnly","props","isControlled","_id","initialId","idFromProps","setId","String","useId","userInteractedRef","selectedPanelRef","isRTL","controlledValue","controlledRef","valueState","setValue","useControlledState","selectedIndex","setSelectedIndex","focusedIndex","setFocusedIndex","tabs","setTabs","onFocusPanel","onSelectTab","onSelectTabWithKeyboard","tabElement","TabList","ctx","onKeyDown","ownRef","forwardedRef","styleProp","y","doc","getElementComputedStyle","handleKeyDown","options","currentIndex","filter","key","rotate","rtl","selectableDescendants","next","getNextOption","prev","getPreviousOption","nextOrPrev","prevOrNext","prevOrFirst","first","getFirstOption","nextOrLast","last","getLastOption","useDescendantKeyDown","tab","current","isBoolean","role","isValidElement","cloneElement","cloneValidElement","child","isSelected","Tab","_","disabled","onBlur","onFocus","tabsId","htmlType","effect","deps","mounted","useUpdateEffect","handleFocus","handleBlur","tabIndex","onClick","type","TabPanels","tabPanels","setTabPanels","TabPanel","ariaLabel","readyToHide","hidden"],"mappings":"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","file":"static/js/4.805b00d6.chunk.js","sourcesContent":["/**\n * Welcome to @reach/tabs!\n *\n * An accessible tabs component.\n *\n * The `Tab` and `TabPanel` elements are associated by their order in the tree.\n * None of the components are empty wrappers, each is associated with a real DOM\n * element in the document, giving you maximum control over styling and composition.\n *\n * You can render any other elements you want inside of `Tabs`, but `TabList`\n * should only render `Tab` elements, and `TabPanels` should only render\n * `TabPanel` elements.\n *\n * @see Docs     https://reach.tech/tabs\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/tabs\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n */\n\nimport React, {\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  Children,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  createDescendantContext,\n  Descendant,\n  DescendantProvider,\n  useDescendant,\n  useDescendantKeyDown,\n  useDescendantsInit,\n  useDescendants,\n} from \"@reach/descendants\";\nimport {\n  boolOrBoolString,\n  checkStyles,\n  cloneValidElement,\n  createNamedContext,\n  forwardRefWithAs,\n  getElementComputedStyle,\n  isNumber,\n  isFunction,\n  makeId,\n  memoWithAs,\n  noop,\n  useControlledSwitchWarning,\n  useControlledState,\n  useEventCallback,\n  useForkedRef,\n  useIsomorphicLayoutEffect,\n  useUpdateEffect,\n  wrapEvent,\n} from \"@reach/utils\";\nimport { useId } from \"@reach/auto-id\";\n\nconst TabsDescendantsContext = createDescendantContext<TabDescendant>(\n  \"TabsDescendantsContext\"\n);\n\nconst TabPanelDescendantsContext = createDescendantContext<TabPanelDescendant>(\n  \"TabPanelDescendantsContext\"\n);\nconst TabsContext = createNamedContext(\n  \"TabsContext\",\n  {} as InternalTabsContextValue\n);\n\nexport enum TabsKeyboardActivation {\n  Auto = \"auto\",\n  Manual = \"manual\",\n}\n\nexport enum TabsOrientation {\n  Horizontal = \"horizontal\",\n  Vertical = \"vertical\",\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Tabs\n *\n * The parent component of the tab interface.\n *\n * @see Docs https://reach.tech/tabs#tabs\n */\nexport const Tabs = forwardRefWithAs<TabsProps, \"div\">(function Tabs(\n  {\n    as: Comp = \"div\",\n    children,\n    defaultIndex,\n    orientation = TabsOrientation.Horizontal,\n    index: controlledIndex = undefined,\n    keyboardActivation = TabsKeyboardActivation.Auto,\n    onChange,\n    readOnly = false,\n    ...props\n  },\n  ref\n) {\n  let isControlled = useRef(controlledIndex != null);\n  useControlledSwitchWarning(controlledIndex, \"index\", \"Tabs\");\n\n  let _id = useId(props.id);\n  let id = props.id ?? makeId(\"tabs\", _id);\n\n  // We only manage focus if the user caused the update vs. a new controlled\n  // index coming in.\n  let userInteractedRef = useRef(false);\n\n  let selectedPanelRef = useRef<HTMLElement | null>(null);\n\n  let isRTL = useRef(false);\n\n  let [selectedIndex, setSelectedIndex] = useControlledState(\n    controlledIndex,\n    defaultIndex ?? 0\n  );\n\n  let [focusedIndex, setFocusedIndex] = useState(-1);\n\n  let [tabs, setTabs] = useDescendantsInit<TabDescendant>();\n\n  let context: InternalTabsContextValue = useMemo(() => {\n    return {\n      focusedIndex,\n      id,\n      isControlled: isControlled.current,\n      isRTL,\n      keyboardActivation,\n      onFocusPanel() {\n        if (\n          selectedPanelRef.current &&\n          isFunction(selectedPanelRef.current.focus)\n        ) {\n          selectedPanelRef.current.focus();\n        }\n      },\n      onSelectTab: readOnly\n        ? noop\n        : (index: number) => {\n            userInteractedRef.current = true;\n            onChange && onChange(index);\n            setSelectedIndex(index);\n          },\n      onSelectTabWithKeyboard: readOnly\n        ? noop\n        : (index: number) => {\n            userInteractedRef.current = true;\n            switch (keyboardActivation) {\n              case TabsKeyboardActivation.Manual:\n                let tabElement = tabs[index] && tabs[index].element;\n                if (tabElement && isFunction(tabElement.focus)) {\n                  tabElement.focus();\n                }\n                return;\n              case TabsKeyboardActivation.Auto:\n              default:\n                onChange && onChange(index);\n                setSelectedIndex(index);\n                return;\n            }\n          },\n      orientation,\n      selectedIndex,\n      selectedPanelRef,\n      setFocusedIndex,\n      setSelectedIndex,\n      userInteractedRef,\n    };\n  }, [\n    focusedIndex,\n    id,\n    keyboardActivation,\n    onChange,\n    orientation,\n    readOnly,\n    selectedIndex,\n    setSelectedIndex,\n    tabs,\n  ]);\n\n  useEffect(() => checkStyles(\"tabs\"), []);\n\n  return (\n    <DescendantProvider\n      context={TabsDescendantsContext}\n      items={tabs}\n      set={setTabs}\n    >\n      <TabsContext.Provider value={context}>\n        <Comp\n          {...props}\n          ref={ref}\n          data-reach-tabs=\"\"\n          data-orientation={orientation}\n          id={props.id}\n        >\n          {isFunction(children)\n            ? children({ focusedIndex, id, selectedIndex })\n            : children}\n        </Comp>\n      </TabsContext.Provider>\n    </DescendantProvider>\n  );\n});\n\n/**\n * @see Docs https://reach.tech/tabs#tabs-props\n */\nexport type TabsProps = {\n  /**\n   * Tabs expects `<TabList>` and `<TabPanels>` as children. The order doesn't\n   * matter, you can have tabs on the top or the bottom. In fact, you could have\n   * tabs on both the bottom and the top at the same time. You can have random\n   * elements inside as well.\n   *\n   * You can also pass a render function to access data relevant to nested\n   * components.\n   *\n   * @see Docs https://reach.tech/tabs#tabs-children\n   */\n  children: React.ReactNode | ((props: TabsContextValue) => React.ReactNode);\n  /**\n   * Like form inputs, a tab's state can be controlled by the owner. Make sure\n   * to include an `onChange` as well, or else the tabs will not be interactive.\n   *\n   * @see Docs https://reach.tech/tabs#tabs-index\n   */\n  index?: number;\n  /**\n   * Describes the activation mode when navigating a tablist with a keyboard.\n   * When set to `\"auto\"`, a tab panel is activated automatically when a tab is\n   * highlighted using arrow keys. When set to `\"manual\"`, the user must\n   * activate the tab panel with either the `Spacebar` or `Enter` keys. Defaults\n   * to `\"auto\"`.\n   *\n   * @see Docs https://reach.tech/tabs#tabs-keyboardactivation\n   */\n  keyboardActivation?: TabsKeyboardActivation;\n  /**\n   * @see Docs https://reach.tech/tabs#tabs-readonly\n   */\n  readOnly?: boolean;\n  /**\n   * Starts the tabs at a specific index.\n   *\n   * @see Docs https://reach.tech/tabs#tabs-defaultindex\n   */\n  defaultIndex?: number;\n  /**\n   * Allows you to switch the orientation of the tabs relative to their tab\n   * panels. This value can either be `\"horizontal\"`\n   * (`TabsOrientation.Horizontal`) or `\"vertical\"`\n   * (`TabsOrientation.Vertical`). Defaults to `\"horizontal\"`.\n   *\n   * @see Docs https://reach.tech/tabs#tabs-orientation\n   * @see MDN  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties\n   */\n  orientation?: TabsOrientation;\n  /**\n   * Calls back with the tab index whenever the user changes tabs, allowing your\n   * app to synchronize with it.\n   *\n   * @see Docs https://reach.tech/tabs#tabs-onchange\n   */\n  onChange?: (index: number) => void;\n};\n\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\";\n  Tabs.propTypes = {\n    children: PropTypes.node.isRequired,\n    onChange: PropTypes.func,\n    orientation: PropTypes.oneOf(Object.values(TabsOrientation)),\n    index: (props, name, compName, location, propName) => {\n      let val = props[name];\n      if (\n        props.index > -1 &&\n        props.onChange == null &&\n        props.readOnly !== true\n      ) {\n        return new Error(\n          \"You provided a value prop to `\" +\n            compName +\n            \"` without an `onChange` handler. This will render a read-only tabs element. If the tabs should be mutable use `defaultIndex`. Otherwise, set `onChange`.\"\n        );\n      } else if (val != null && !isNumber(val)) {\n        return new Error(\n          `Invalid prop \\`${propName}\\` supplied to \\`${compName}\\`. Expected \\`number\\`, received \\`${\n            Array.isArray(val) ? \"array\" : typeof val\n          }\\`.`\n        );\n      }\n      return null;\n    },\n    defaultIndex: PropTypes.number,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabList\n *\n * The parent component of the tabs.\n *\n * @see Docs https://reach.tech/tabs#tablist\n */\nconst TabListImpl = forwardRefWithAs<TabListProps, \"div\">(function TabList(\n  { children, as: Comp = \"div\", onKeyDown, ...props },\n  forwardedRef\n) {\n  const {\n    focusedIndex,\n    isControlled,\n    isRTL,\n    keyboardActivation,\n    onSelectTabWithKeyboard,\n    orientation,\n    selectedIndex,\n    setSelectedIndex,\n  } = useContext(TabsContext);\n  let tabs = useDescendants(TabsDescendantsContext);\n\n  let ownRef = useRef<HTMLElement | null>(null);\n  let ref = useForkedRef(forwardedRef, ownRef);\n\n  useEffect(() => {\n    if (\n      ownRef.current &&\n      ((ownRef.current.ownerDocument &&\n        ownRef.current.ownerDocument.dir === \"rtl\") ||\n        getElementComputedStyle(ownRef.current, \"direction\") === \"rtl\")\n    ) {\n      isRTL.current = true;\n    }\n  }, [isRTL]);\n\n  let handleKeyDown = useEventCallback(\n    wrapEvent(\n      onKeyDown,\n      useDescendantKeyDown(TabsDescendantsContext, {\n        currentIndex:\n          keyboardActivation === TabsKeyboardActivation.Manual\n            ? focusedIndex\n            : selectedIndex,\n        orientation,\n        rotate: true,\n        callback: onSelectTabWithKeyboard,\n        filter: (tab) => !tab.disabled,\n        rtl: isRTL.current,\n      })\n    )\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    // In the event an uncontrolled component's selected index is disabled,\n    // (this should only happen if the first tab is disabled and no default\n    // index is set), we need to override the selection to the next selectable\n    // index value.\n    if (!isControlled && boolOrBoolString(tabs[selectedIndex]?.disabled)) {\n      let next = tabs.find((tab) => !tab.disabled);\n      if (next) {\n        setSelectedIndex(next.index);\n      }\n    }\n  }, [tabs, isControlled, selectedIndex, setSelectedIndex]);\n\n  return (\n    <Comp\n      // The element that serves as the container for the set of tabs has role\n      // `tablist`\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      role=\"tablist\"\n      // If the `tablist` element is vertically oriented, it has the property\n      // `aria-orientation` set to `\"vertical\"`. The default value of\n      // `aria-orientation` for a tablist element is `\"horizontal\"`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      aria-orientation={orientation}\n      {...props}\n      data-reach-tab-list=\"\"\n      ref={ref}\n      onKeyDown={handleKeyDown}\n    >\n      {Children.map(children, (child, index) => {\n        // TODO: Remove in 1.0\n        return cloneValidElement(child, {\n          isSelected: index === selectedIndex,\n        });\n      })}\n    </Comp>\n  );\n});\n\nif (__DEV__) {\n  TabListImpl.displayName = \"TabList\";\n  TabListImpl.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\nconst TabList = memoWithAs(TabListImpl);\n\n/**\n * @see Docs https://reach.tech/tabs#tablist-props\n */\nexport type TabListProps = {\n  /**\n   * `TabList` expects multiple `Tab` elements as children.\n   *\n   * `TabPanels` expects multiple `TabPanel` elements as children.\n   *\n   * @see Docs https://reach.tech/tabs#tablist-children\n   */\n  children?: React.ReactNode;\n};\n\nif (__DEV__) {\n  TabList.displayName = \"TabList\";\n}\n\nexport { TabList };\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Tab\n *\n * The interactive element that changes the selected panel.\n *\n * @see Docs https://reach.tech/tabs#tab\n */\nexport const Tab = forwardRefWithAs<\n  // TODO: Remove this when cloneElement is removed\n  TabProps & { isSelected?: boolean },\n  \"button\"\n>(function Tab(\n  {\n    children,\n    isSelected: _,\n    as: Comp = \"button\",\n    index: indexProp,\n    disabled,\n    onBlur,\n    onFocus,\n    ...props\n  },\n  forwardedRef\n) {\n  const {\n    id: tabsId,\n    onSelectTab,\n    orientation,\n    selectedIndex,\n    userInteractedRef,\n    setFocusedIndex,\n  } = useContext(TabsContext);\n  const ownRef = useRef<HTMLElement | null>(null);\n  const ref = useForkedRef(forwardedRef, ownRef);\n  const index = useDescendant(\n    {\n      element: ownRef.current!,\n      disabled: !!disabled,\n    },\n    TabsDescendantsContext,\n    indexProp\n  );\n  const htmlType =\n    Comp === \"button\" && props.type == null ? \"button\" : props.type;\n\n  const isSelected = index === selectedIndex;\n\n  function onSelect() {\n    onSelectTab(index);\n  }\n\n  useUpdateEffect(() => {\n    if (isSelected && ownRef.current && userInteractedRef.current) {\n      userInteractedRef.current = false;\n      if (isFunction(ownRef.current.focus)) {\n        ownRef.current.focus();\n      }\n    }\n  }, [isSelected, userInteractedRef]);\n\n  let handleFocus = useEventCallback(\n    wrapEvent(onFocus, () => {\n      setFocusedIndex(index);\n    })\n  );\n\n  let handleBlur = useEventCallback(\n    wrapEvent(onBlur, () => {\n      setFocusedIndex(-1);\n    })\n  );\n\n  return (\n    <Comp\n      // Each element with role `tab` has the property `aria-controls` referring\n      // to its associated `tabpanel` element.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      aria-controls={makeId(tabsId, \"panel\", index)}\n      aria-disabled={disabled}\n      // The active tab element has the state `aria-selected` set to `true` and\n      // all other tab elements have it set to `false`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      aria-selected={isSelected}\n      // Each element that serves as a tab has role `tab` and is contained\n      // within the element with role `tablist`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      role=\"tab\"\n      tabIndex={isSelected ? 0 : -1}\n      {...props}\n      ref={ref}\n      data-reach-tab=\"\"\n      data-orientation={orientation}\n      data-selected={isSelected ? \"\" : undefined}\n      disabled={disabled}\n      id={makeId(tabsId, \"tab\", index)}\n      onClick={onSelect}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      type={htmlType}\n    >\n      {children}\n    </Comp>\n  );\n});\n\n/**\n * @see Docs https://reach.tech/tabs#tab-props\n */\nexport type TabProps = {\n  /**\n   * `Tab` can receive any type of children.\n   *\n   * @see Docs https://reach.tech/tabs#tab-children\n   */\n  children?: React.ReactNode;\n  /**\n   * Disables a tab when true. Clicking will not work and keyboard navigation\n   * will skip over it.\n   *\n   * @see Docs https://reach.tech/tabs#tab-disabled\n   */\n  disabled?: boolean;\n  index?: number;\n};\n\nif (__DEV__) {\n  Tab.displayName = \"Tab\";\n  Tab.propTypes = {\n    children: PropTypes.node,\n    disabled: PropTypes.bool,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabPanels\n *\n * The parent component of the panels.\n *\n * @see Docs https://reach.tech/tabs#tabpanels\n */\nconst TabPanelsImpl = forwardRefWithAs<TabPanelsProps, \"div\">(\n  function TabPanels({ children, as: Comp = \"div\", ...props }, forwardedRef) {\n    let ownRef = useRef();\n    let ref = useForkedRef(ownRef, forwardedRef);\n    let [tabPanels, setTabPanels] = useDescendantsInit<TabPanelDescendant>();\n\n    return (\n      <DescendantProvider\n        context={TabPanelDescendantsContext}\n        items={tabPanels}\n        set={setTabPanels}\n      >\n        <Comp {...props} ref={ref} data-reach-tab-panels=\"\">\n          {children}\n        </Comp>\n      </DescendantProvider>\n    );\n  }\n);\n\nif (__DEV__) {\n  TabPanelsImpl.displayName = \"TabPanels\";\n  TabPanelsImpl.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\nconst TabPanels = memoWithAs(TabPanelsImpl);\n\n/**\n * @see Docs https://reach.tech/tabs#tabpanels-props\n */\nexport type TabPanelsProps = TabListProps & {};\n\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\";\n}\n\nexport { TabPanels };\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabPanel\n *\n * The panel that displays when it's corresponding tab is active.\n *\n * @see Docs https://reach.tech/tabs#tabpanel\n */\nexport const TabPanel = forwardRefWithAs<TabPanelProps, \"div\">(\n  function TabPanel(\n    { children, \"aria-label\": ariaLabel, as: Comp = \"div\", ...props },\n    forwardedRef\n  ) {\n    let { selectedPanelRef, selectedIndex, id: tabsId } = useContext(\n      TabsContext\n    );\n    let ownRef = useRef<HTMLElement | null>(null);\n\n    let index = useDescendant(\n      { element: ownRef.current! },\n      TabPanelDescendantsContext\n    );\n\n    let id = makeId(tabsId, \"panel\", index);\n\n    // Because useDescendant will always return -1 on the first render,\n    // `isSelected` will briefly be false for all tabs. We set a tab panel's\n    // hidden attribute based `isSelected` being false, meaning that all tabs\n    // are initially hidden. This makes it impossible for consumers to do\n    // certain things, like focus an element inside the active tab panel when\n    // the page loads. So what we can do is track that a panel is \"ready\" to be\n    // hidden once effects are run (descendants work their magic in\n    // useLayoutEffect, so we can set our ref in useEffecct to run later). We\n    // can use a ref instead of state because we're always geting a re-render\n    // anyway thanks to descendants. This is a little more coupled to the\n    // implementation details of descendants than I'd like, but we'll add a test\n    // to (hopefully) catch any regressions.\n    let isSelected = index === selectedIndex;\n    let readyToHide = useRef(false);\n    let hidden = readyToHide.current ? !isSelected : false;\n    React.useEffect(() => {\n      readyToHide.current = true;\n    }, []);\n\n    let ref = useForkedRef(\n      forwardedRef,\n      ownRef,\n      isSelected ? selectedPanelRef : null\n    );\n\n    return (\n      <Comp\n        // Each element with role `tabpanel` has the property `aria-labelledby`\n        // referring to its associated tab element.\n        aria-labelledby={makeId(tabsId, \"tab\", index)}\n        hidden={hidden}\n        // Each element that contains the content panel for a tab has role\n        // `tabpanel`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n        role=\"tabpanel\"\n        tabIndex={isSelected ? 0 : -1}\n        {...props}\n        ref={ref}\n        data-reach-tab-panel=\"\"\n        id={id}\n      >\n        {children}\n      </Comp>\n    );\n  }\n);\n\n/**\n * @see Docs https://reach.tech/tabs#tabpanel-props\n */\nexport type TabPanelProps = {\n  /**\n   * `TabPanel` can receive any type of children.\n   *\n   * @see Docs https://reach.tech/tabs#tabpanel-children\n   */\n  children?: React.ReactNode;\n};\n\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\";\n  TabPanel.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hook that exposes data for a given `Tabs` component to its descendants.\n *\n * @see Docs https://reach.tech/tabs#usetabscontext\n */\nexport function useTabsContext(): TabsContextValue {\n  let { focusedIndex, id, selectedIndex } = useContext(TabsContext);\n  return useMemo(\n    () => ({\n      focusedIndex,\n      id,\n      selectedIndex,\n    }),\n    [focusedIndex, id, selectedIndex]\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype TabDescendant = Descendant<HTMLElement> & {\n  disabled: boolean;\n};\n\ntype TabPanelDescendant = Descendant<HTMLElement>;\n\nexport type TabsContextValue = {\n  focusedIndex: number;\n  id: string;\n  selectedIndex: number;\n};\n\ntype InternalTabsContextValue = {\n  focusedIndex: number;\n  id: string;\n  isControlled: boolean;\n  isRTL: React.MutableRefObject<boolean>;\n  keyboardActivation: TabsKeyboardActivation;\n  onFocusPanel: () => void;\n  onSelectTab: (index: number) => void;\n  onSelectTabWithKeyboard: (index: number) => void;\n  orientation: TabsOrientation;\n  selectedIndex: number;\n  selectedPanelRef: React.MutableRefObject<HTMLElement | null>;\n  setFocusedIndex: React.Dispatch<React.SetStateAction<number>>;\n  setSelectedIndex: React.Dispatch<React.SetStateAction<number>>;\n  userInteractedRef: React.MutableRefObject<boolean>;\n};\n"],"sourceRoot":""}